""" Prepares input trees and saves them """

import os
import pickle
import zipfile
from datetime import date
import pandas as pd
from tqdm import tqdm

from vulnerability_prediction import REPOS
from vulnerability_prediction.utils import LOGGER

AST_DIR = REPOS["wireshark"]["ast_output_dir"]


def read_ast_dfs(summary_df, only_related=True):
    """Iterates over AST summaries and reads their dataframes"""

    trees = []

    if only_related:
        vuln_files = summary_df[summary_df.is_vuln == 1].file.unique()
        summary_df = summary_df[summary_df.file.isin(vuln_files)]

    for _, commit, file_name, func_name, out_file, is_vuln \
            in tqdm(summary_df.to_records()):

        try:
            path_splitted = out_file.split("\\")
            file_path = os.path.join(AST_DIR, *path_splitted[7:])

            df = pd.read_csv(file_path, compression="gzip")
            tree = {
                "df": df,
                "file": file_name,
                "method": func_name,
                "commit": commit,
                "label": is_vuln
            }
            if not duplication_check(tree, trees):
                trees.append(tree)
            else:
                del tree["df"]
                del tree
        except Exception as e:
            print(e)
            pass

    return trees


def duplication_check(tree, trees):
    """check ast duplication"""
    for old_tree in trees:
        if (tree["file"] != old_tree["file"] or
                tree["method"] != old_tree["method"]):
            continue

        if compare_trees(tree["df"], old_tree["df"]):
            return True

    return False


def compare_trees(tree_1, tree_2):
    """ Compare trees for equality """
    if len(tree_1) != len(tree_2):
        return False

    if tree_1.tokens.values[0] == tree_2.tokens.values[0]:
        return True

    return False


def run():
    """Main process"""

    cols = ["commit_id", "file", "func_name", "out_file", "is_vuln"]
    summary_df = pd.read_csv(os.path.join(AST_DIR, "summary.gz"), index_col=0)
    summary_df.sort_values("commit_date", ascending=False, inplace=True)

    LOGGER.info("Start reading trees")
    trees = read_ast_dfs(summary_df[cols], False)
    LOGGER.info("Num trees %s", len(trees))
    LOGGER.info("Removing trees that have less than or equal to 2 nodes")
    trees = [t for t in trees if len(t["df"]) > 2]

    LOGGER.info("Num trees after removing <= 2 %s", len(trees))


if __name__ == "__main__":
    run()
