""" Base Module for Graph neural network models """

import torch
import torch.nn as nn
import torch.nn.functional as F
import dgl


class BaseGraphModel(nn.Module):
    """Base Graph Model Class"""

    def __init__(self, in_dim, hidden_dim, n_classes, device, use_aux=False):
        super().__init__()
        self.device = device
        self.use_aux = use_aux

        self.layers = nn.ModuleList([])
        self.aux = nn.Sequential(
            nn.Linear(2, 1024),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(1024, 1024),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(1024, hidden_dim),
            nn.ReLU()
        )

        self.classify = nn.Sequential(
            nn.Linear(2 * hidden_dim, hidden_dim),
            nn.ReLU(),
            nn.Linear(hidden_dim, n_classes)
        )

    @classmethod
    def _concat(cls, g):
        max_ = dgl.max_nodes(g, 'h')
        mean_ = dgl.mean_nodes(g, 'h')

        return torch.cat([max_, mean_], 1)

    def forward(self, g, aux_input):
        # For undirected graphs, in_degree is the same as
        # out_degree.
        h = g.ndata['x'].float().to(self.device)
        for conv in self.layers:
            h = conv(g, h)
        g.ndata['h'] = h
        hg = F.relu(self._concat(g))
        if self.use_aux:
            aux = self.aux(aux_input)
            hg = torch.cat([hg, aux], 1)
        return self.classify(hg)
