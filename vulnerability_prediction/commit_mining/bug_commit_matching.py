"""
Bug-commit matching module
Search for bug id patterns in commit messages
"""

import os
import re
from collections import defaultdict
import pandas as pd
import git
from vulnerability_prediction import REPOS
from vulnerability_prediction.scrapers import FILE_SUFFIX as BUG_FILE_SUFFIX


def search_bugs_in_commits(commits, bug_ids):
    """
    Searches for bug ids in commit messages
    :param commits: list[git.Commit]
        the list of commits
    :param bug_ids: list[string]
        list of bug ids
    :returns: dict
        dictionary of bug_id: commit_id[] matchings
    """
    match = defaultdict(list)

    # pylint: disable = anomalous-backslash-in-string
    pattern = "Bug(\ |\:|\: |\=|\= |)({})".format("|".join(bug_ids))
    # pylint: enable = anomalous-backslash-in-string

    prog = re.compile(pattern, flags=re.IGNORECASE)

    all_matched = [(prog.search(c.message).groups()[1], c.hexsha)
                   for c in commits if prog.search(c.message)]

    print("Matched to {} commits".format(len(all_matched)))

    for bug_id, commit_id in all_matched:
        match[bug_id].append(commit_id)

    return match


def find_commits_of_bug(row, matching):
    """
    Prepares the set of commit ids that have been matched to
    current bug_id
    :param row: pd.Series
        Bug info row
    :param matching: dict
        dictionary of bug_id: commit_id[] matchings
    :returns: string
        string of commit ids matched to current bug_id
        joined by pipe (|) character
    """
    match = matching[row["bug_id"]]
    if len(match) > 0:
        print(row["bug_id"], len(match))

    return "|".join(set(match))


def search_commits(bugs_df, commits):
    """
    Searches for bug id patterns in commit messages
    :param bugs_df: pd.DataFrame
        DataFrame of bug records
    :param commits: list[git.Commit]
        the list of commits
    :returns: pd.DataFrame
        DataFrame of bug_id, commit_id matching
    """
    matching = search_bugs_in_commits(
        commits, bugs_df["bug_id"].dropna().values)

    bugs_df["commit_id"] = bugs_df.apply(
        find_commits_of_bug, args=(matching,), axis=1)

    bugs_df['commit_id'] = bugs_df['commit_id'].str.split('|')
    bugs_df = bugs_df.explode('commit_id')

    return bugs_df.drop_duplicates()


def run():
    """
    Iterates over repositories and does the commit search and match operations
    """
    for repo_entry in REPOS.items():
        repo_key, repo_def = repo_entry

        print("Searching for {}...".format(repo_key))

        file_path = "{}_{}.csv".format(repo_key, BUG_FILE_SUFFIX)
        bug_matching_path = os.path.join(repo_def["output_dir"], file_path)

        bugs_df = pd.read_csv(bug_matching_path).astype(str)
        repo = git.Repo(repo_def["path"])

        commits = list(repo.iter_commits())
        matching_df = search_commits(bugs_df, commits)

        output_path = os.path.join(
            repo_def["output_dir"],
            "{}_bug_commit_matching.csv".format(repo_key)
        )

        matching_df.to_csv(output_path, index=False)


if __name__ == "__main__":
    run()
