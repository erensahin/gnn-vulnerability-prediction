"Base parser module"
from abc import ABC, abstractmethod


class BaseNode(ABC):
    """ Base Node """

    @abstractmethod
    def __init__(self, node, level, base_path, parent=None):
        pass

    @abstractmethod
    def get_by_node(self, node):
        """Return Node class by clang node"""

    @abstractmethod
    def print(self, indent):
        """Prints the node"""


class BaseParser(ABC):
    """Base parser class"""

    @abstractmethod
    def __init__(self):
        pass

    @classmethod
    @abstractmethod
    def traverse(cls, node, base_folder, parent=None, level=1, node_list=None):
        """Abstract traverse method"""

    @abstractmethod
    def visualize_tree(self, nodes, parents=None):
        """Visualizes the tree"""

    @classmethod
    @abstractmethod
    def to_pandas(cls, nodes):
        """Converts tree to pd.DataFrame"""

    @abstractmethod
    def export_tree(self, nodes, file_name):
        """Exports tree to a file"""

    @abstractmethod
    def parse(self, base_folder, file):
        """Abstract parse method"""
